
Nous allons voir aujourdâ€™hui comment sauvegarder une ou plusieurs bases de donnÃ©es MySQL de maniÃ¨re automatisÃ©e avec un jeu de sauvegardes tournantes compressÃ©s au format GZip et ceci sur un serveur mutualisÃ© (cette mÃ©thode fonctionne aussi sur un serveur dÃ©diÃ©). Cette mÃ©thode ne requiert aucun accÃ¨s root ou administrateur Ã  votre serveur. Il vous suffit simplement dâ€™avoir les droits en lecture/Ã©criture sur la base de donnÃ©es et dans lâ€™espace de stockage oÃ¹ vous allez enregistrer vos fichiers !

Cet article se dÃ©compose en 2 sections :

Lâ€™utilisation du script backup.php,tÃ©lÃ©charger
Fonctionnement et explication du code source.
1) UTILISATION DU SCRIPT BACKUP.PHP

Pour utiliser le script, il vous suffit dâ€™ouvrir le fichier avec votre Ã©diteur de code prÃ©fÃ©rÃ© et de vous rendre Ã  la fin de la classe BackupMySQL prÃ©sente dans le fichier backup.php.

La classe BackupMySQL fonctionne de la maniÃ¨re suivante : une instance de la classe dÃ©clenchera automatiquement une sauvegarde ! Câ€™est aussi simple que celaâ€¦

Exemple :

new BackupMySQL(array(
	'username' => 'root',
	'passwd' => 'root',
	'dbname' => 'ma_base'
	));
Explication : La classe va tenter de crÃ©er une sauvegarde entiÃ¨re de la base de donnÃ©es ma_base avec le serveur MySQL localhost ayant pour identifiant root et mot de passe root.

Vous constatez que lâ€™instance de la classe new BackupMySQL nâ€™est allouÃ©e Ã  aucune variable. Ceci est tout Ã  fait normal car la classe effectue une seule action : la sauvegarde, puis la classe se dÃ©truit dâ€™elle-mÃªme.

La ligne new BackupMySQL nâ€™utilise quâ€™un seul argument array() tableau. Ce tableau vous permet dâ€™inscrire les diffÃ©rentes options dont vous avez besoin pour personnaliser votre sauvegarde. Toutes les clÃ©s du tableau sont optionnelles en thÃ©orie. En pratique, certaines sont nÃ©cessaires comme lâ€™identifiant et mot de passe de la base de donnÃ©es MySQL. Voici le dÃ©tail complet de ce tableau magique avec ses valeurs par dÃ©faut :

$default = array(
		'host' => ini_get('mysqli.default_host'),
		'username' => ini_get('mysqli.default_user'),
		'passwd' => ini_get('mysqli.default_pw'),
		'dbname' => '',
		'port' => ini_get('mysqli.default_port'),
		'socket' => ini_get('mysqli.default_socket'),
		'dossier' => './',
		'nbr_fichiers' => 5,
		'nom_fichier' => 'backup'
		);
La clÃ© host vous permet de dÃ©finir lâ€™hÃ´te du serveur MySQL,
La clÃ© username vous permet de dÃ©finir lâ€™identifiant de connexion au serveur MySQL,
La clÃ© passwd vous permet de dÃ©finir le mot de passe de connexion au serveur MySQL,
La clÃ© dbname vous permet de dÃ©finir le nom de la base Ã  sauvegarder,
La clÃ© port vous permet de dÃ©finir le port de connexion au serveur MySQL,
La clÃ© socket vous permet de dÃ©finir le socket Ã  utiliser pour le serveur MySQL,
La clÃ© dossier vous permet de dÃ©finir le dossier oÃ¹ se trouveront les sauvegardes de votre base. Lâ€™emplacement du dossier se fait selon lâ€™emplacement du fichier PHP qui appellera votre script de sauvegarde,
La clÃ© nbr_fichiers vous permet de dÃ©finir le nombre de sauvegardes Ã  conserver,
La clÃ© nom_fichier vous permet de dÃ©finir le prÃ©fix du nom du fichier pour la sauvegarde (Exemple : backup20130130-153012.sql.gz)
Une fois votre script PHP rÃ©glÃ© avec les valeurs ci-dessus, il vous suffit simplement de lancer le script et la sauvegarde se fait toute seule !

Les anciennes sauvegardes seront effacÃ©es automatiquement pour ne pas saturer votre espace disque.

En ce qui concerne la restauration, elle pourra Ãªtre effectuÃ©e avec nâ€™importe quel outil dâ€™administration MySQL tel que phpMyAdmin.

Vous souhaitez effectuer plusieurs sauvegardes ? Rien de plus simple. Il vous suffit de faire autant dâ€™instance de classe que nÃ©cessaire. Je vous dÃ©conseille de placer toutes vos sauvegardes dans le mÃªme fichier PHP, car les scripts PHP ne peuvent pas sâ€™exÃ©cuter indÃ©finiment sur le serveur (cf. max_execution_time dans le fichier php.ini). Un fichier PHP par sauvegarde me semble plus sage car ce script est plutÃ´t gourmand en ressources serveur ğŸ˜‰

Comment planifier vos sauvegardes de maniÃ¨res automatisÃ©es ? Certains hÃ©bergeurs proposent les tÃ¢ches planifiÃ©es (cron, crontab) dans leur hÃ©bergement. Il vous suffit de spÃ©cifier lâ€™emplacement du script PHP, la date et lâ€™heure de lâ€™exÃ©cution, et le tour est jouÃ©.

Si votre hÃ©bergeur ne propose pas ce type de prestation, Google vous proposera quelques adresses avec la recherche suivante : crontab gratuit.

2) FONCTIONNEMENT ET EXPLICATION DU CODE SOURCE

PrÃ©requis : Avant de commencer Ã  modifier ce script tÃªte baissÃ©e, je vous invite Ã  rÃ©viser les concepts de la POO Programmation OrientÃ©e Objet. http://www.php.net/manual/fr/language.oop5.php

Si vous avez dÃ©jÃ  ouvert le script PHP (et je prÃ©sume que câ€™est le cas), vous avez pu constater que la classe BackupMySQL est Ã©tendue de mysqli, ceci veut dire que toutes les mÃ©thodes disponibles dans mysqli sont Ã  votre disposition dans BackupMySQL sans instancier mysqli et pour cause, elle hÃ©rite de mysqli.

Le constructeur de la classe public function __construct reprend le principe dâ€™Ã©criture des paramÃ¨tres avec un tableau array() et non avec des arguments Ã  la suite. Ceci permet une certaine souplesse dans lâ€™Ã©criture des paramÃ¨tres : vous Ãªtes libre de lâ€™ordre des paramÃ¨tres et tous les paramÃ¨tres sont en option (ce dernier point peut aussi Ãªtre un problÃ¨me, Ã  vous dâ€™affiner les contrÃ´les si vous souhaitez Ã©viter les plantages).

Les valeurs par dÃ©faut, vues dans la premiÃ¨re partie, proviennent de la documentation officielle PHP du constructeur mysqli.

mysqli est donc rÃ©ellement lancÃ© (si je puis mâ€™exprimer ainsi) avec la ligne parent::__construct( â€¦ );

Ci-dessous, vous avez les divers contrÃ´les dâ€™usage :

â€“ La connexion au serveur fonctionne â€“t-elle ?

â€“ Le dossier spÃ©cifiÃ© existe-il ?

â€“ Un fichier peut-il Ãªtre Ã©crit ?

Et si tout va bien, la sauvegarde dÃ©marreâ€¦

La mÃ©thode protected function message() vous permet de suivre lâ€™Ã©volution de votre script. Si vous ne souhaitez plus voir les opÃ©rations par soucis de confidentialitÃ©, il vous suffit de commenter le echo.

La mÃ©thode protected function insert_clean() a pour but de protÃ©ger les caractÃ¨res spÃ©ciaux dans votre fichier de sauvegarde et surtout ne pas avoir de bugs lors de la restauration du fichier avec les apostrophes et autres retour-charriots.

La mÃ©thode protected function sauvegarder() comme son nom lâ€™indique, dÃ©clenche LA sauvegarde et lâ€™Ã©criture du fichier GZip sur lâ€™espace disque.

Comment procÃ¨de-t-elle ?

On demande Ã  MySQL de retourner le nom des tables prÃ©sentes dans la base avec la requÃªte SHOW TABLE STATUS,
Nous voici dans une boucle while qui tournera pour chaque table,
On inscrit dans le fichier sauvegarde un DROP TABLE IF EXISTS pour supprimer les anciennes tables,
La requÃªte SHOW CREATE TABLE nous retourne une requÃªte toute faite pour la crÃ©ation de la table en cours,
On inscrit les donnÃ©es par INSER INTO que tout le monde connaÃ®t, je prÃ©sume,
On Ã©crit les donnÃ©es avec gzwrite() et le fichier se clÃ´t avec gzclose(),
Votre sauvegarde est terminÃ©e !
La derniÃ¨re mÃ©thode protected function purger_fichiers() a pour but de ? de ?â€¦ Oui ! De purger les vieux fichiers !

Comment procÃ¨de-t-elle ?

On parcourt le dossier avec la classe Directory par lâ€™intermÃ©diaire de la fonction dir(),
La boucle while permet de lister les dossiers et fichiers prÃ©sents, nous allons uniquement sÃ©lectionner les fichiers (et non les dossiers) se terminant par lâ€™extension .gz avec lâ€™expression rÃ©guliÃ¨re preg_match(â€˜/\.gz$/iâ€™, $fichier)
Une fois la boucle terminÃ©e, la variables $fichiers contient tous les fichiers de sauvegarde .gz, la date de la sauvegarde Ã©tant prÃ©sente dans le nom du ficher, il suffit dâ€™inverser lâ€™ordre du nom des fichiers avec rsort() et le script nâ€™aura plus quâ€™Ã  supprimer les anciens fichiers dans la boucle for avec unlink().
Et voilÃ , vos anciens fichiers ont Ã©tÃ© supprimÃ©s !
Cette classe Ã©tant livrÃ©e en lâ€™Ã©tat, libre Ã  vous de la modifier, de lâ€™amÃ©liorer comme bon vous semble. Nâ€™oubliez pas quâ€™elle hÃ©rite de mysqli, donc, faites attention de ne pas Ã©craser une mÃ©thode ou une variable prÃ©sente dans la classe mysqli.

http://www.php.net/manual/fr/book.mysqli.php

[Total : 11    Moyenne : 4.6/5]
MySQL backup ecris parjeanluc moyenne des votes4.6/5 - 11 evaluations 