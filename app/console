#!/usr/bin/env php
<?php

// if you don't want to setup permissions the proper way, just uncomment the following PHP line
// read http://symfony.com/doc/current/book/installation.html#configuration-and-setup for more information
//umask(0000);

set_time_limit(0);

require_once __DIR__ . '/../vendor/autoload.php';
include __DIR__ . '/hook.php';

use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\ConsoleEvents;
use Symfony\Component\Console\Event\ConsoleCommandEvent;

$boot = new DTC\Common\Bootstrap('test', false);
$app = $boot->getApp();
$console = $app['console'];

$dispatcher = new EventDispatcher();

$commands = array(
  new \DTC\Common\Command\OrmClearCacheCommand(),
    
  new \Doctrine\ORM\Tools\Console\Command\ClearCache\MetadataCommand(),
  new \Doctrine\ORM\Tools\Console\Command\ClearCache\QueryCommand(),
  new \Doctrine\ORM\Tools\Console\Command\ClearCache\ResultCommand(),
  new \Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand(),
  new \Doctrine\ORM\Tools\Console\Command\SchemaTool\DropCommand(),
  new \Doctrine\ORM\Tools\Console\Command\SchemaTool\UpdateCommand(),
  new \Doctrine\ORM\Tools\Console\Command\ConvertDoctrine1SchemaCommand(),
  new \Doctrine\ORM\Tools\Console\Command\ConvertMappingCommand(),
  new \Doctrine\ORM\Tools\Console\Command\EnsureProductionSettingsCommand(),
  new \Doctrine\ORM\Tools\Console\Command\GenerateEntitiesCommand(),
  new \Doctrine\ORM\Tools\Console\Command\GenerateProxiesCommand(),
  new \Doctrine\ORM\Tools\Console\Command\GenerateRepositoriesCommand(),
  new \Doctrine\ORM\Tools\Console\Command\InfoCommand(),
  new \Doctrine\ORM\Tools\Console\Command\RunDqlCommand(),
  new \Doctrine\ORM\Tools\Console\Command\ValidateSchemaCommand(),
  new \Doctrine\DBAL\Tools\Console\Command\ImportCommand(),
  new \Doctrine\DBAL\Tools\Console\Command\ReservedWordsCommand(),
  new \Doctrine\DBAL\Tools\Console\Command\RunSqlCommand(),
);

foreach ($commands as $command) {
    
    $command->getDefinition()->addOption(new InputOption('connection', null, InputOption::VALUE_REQUIRED, 'Define connection'));
    $command->getDefinition()->addOption(new InputOption('entityManager', null, InputOption::VALUE_REQUIRED, 'Define entity manager'));
    
    $console->add($command);
}
    
$dispatcher->addListener(ConsoleEvents::COMMAND, function (ConsoleCommandEvent $event) use ($app, $console) {
    
    // get the input instance
    $input = $event->getInput();

    // get the output instance
    $output = $event->getOutput();

    // get the command to be executed
    $command = $event->getCommand();
    
    $connection     = $input->getParameterOption('--connection');
    $entityManager  = $input->getParameterOption('--entityManager');
        
    if ($command != false && $entityManager != false) {
        $command->setHelperSet(new Symfony\Component\Console\Helper\HelperSet(array(
            'db' => new \Doctrine\DBAL\Tools\Console\Helper\ConnectionHelper($app['dbs'][$connection]),
            'em' => new \Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper($app['orm.ems'][$entityManager])
        )));
    }
    
    // write something about the command
    $output->writeln(sprintf('Before running command <info>%s</info>', $command->getName()));
});

$console->setDispatcher($dispatcher);

$console->run();